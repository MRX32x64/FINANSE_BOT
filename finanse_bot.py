import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import json
import os
from datetime import datetime
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CATEGORY, AMOUNT, DESCRIPTION = range(3)

class FinanceBot:
    def __init__(self, token):
        self.token = token
        self.data_file = 'finance_data.json'
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.data_file):
            with open(self.data_file, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
        else:
            self.data = {}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)
    
    def get_user_data(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if str(user_id) not in self.data:
            self.data[str(user_id)] = {
                'transactions': [],
                'balance': 0,
                'categories': {
                    '–¥–æ—Ö–æ–¥': ['–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Ñ—Ä–∏–ª–∞–Ω—Å', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ø–æ–¥–∞—Ä–æ–∫'],
                    '—Ä–∞—Å—Ö–æ–¥': ['–µ–¥–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–∂–∏–ª—å–µ', '–∑–¥–æ—Ä–æ–≤—å–µ']
                }
            }
        return self.data[str(user_id)]
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.message.from_user
        keyboard = [
            [KeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), KeyboardButton("üì§ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
            [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
            "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üì• –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥\n"
            "üì§ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ - –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É\n"
            "üí∞ –ë–∞–ª–∞–Ω—Å - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
            "üìã –ò—Å—Ç–æ—Ä–∏—è - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def add_income(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
        user_data = self.get_user_data(update.message.from_user.id)
        categories = user_data['categories']['–¥–æ—Ö–æ–¥']
        
        keyboard = [[KeyboardButton(cat)] for cat in categories]
        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:",
            reply_markup=reply_markup
        )
        return CATEGORY
    
    async def add_expense(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
        user_data = self.get_user_data(update.message.from_user.id)
        categories = user_data['categories']['—Ä–∞—Å—Ö–æ–¥']
        
        keyboard = [[KeyboardButton(cat)] for cat in categories]
        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=reply_markup
        )
        return CATEGORY
    
    async def category_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category = update.message.text
        context.user_data['transaction'] = {'category': category}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_data = self.get_user_data(update.message.from_user.id)
        if category in user_data['categories']['–¥–æ—Ö–æ–¥']:
            context.user_data['transaction_type'] = 'income'
            prompt = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:"
        else:
            context.user_data['transaction_type'] = 'expense'
            prompt = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:"
        
        await update.message.reply_text(
            prompt,
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        return AMOUNT
    
    async def amount_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
        try:
            amount = float(update.message.text)
            if amount <= 0:
                await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return AMOUNT
            
            context.user_data['transaction']['amount'] = amount
            
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            )
            return DESCRIPTION
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return AMOUNT
    
    async def description_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description = update.message.text
        context.user_data['transaction']['description'] = description
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await self.save_transaction(update, context)
        return ConversationHandler.END
    
    async def skip_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è"""
        context.user_data['transaction']['description'] = ""
        await self.save_transaction(update, context)
        return ConversationHandler.END
    
    async def save_transaction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        user_id = update.message.from_user.id
        transaction_data = context.user_data['transaction']
        transaction_type = context.user_data['transaction_type']
        
        user_data = self.get_user_data(user_id)
        
        transaction = {
            'type': transaction_type,
            'category': transaction_data['category'],
            'amount': transaction_data['amount'],
            'description': transaction_data.get('description', ''),
            'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        user_data['transactions'].append(transaction)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if transaction_type == 'income':
            user_data['balance'] += transaction_data['amount']
        else:
            user_data['balance'] -= transaction_data['amount']
        
        self.save_data()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = [
            [KeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), KeyboardButton("üì§ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
            [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        operation_type = "–¥–æ—Ö–æ–¥" if transaction_type == 'income' else "—Ä–∞—Å—Ö–æ–¥"
        await update.message.reply_text(
            f"‚úÖ {operation_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction_data['category']}\n"
            f"–°—É–º–º–∞: {transaction_data['amount']} —Ä—É–±.\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {transaction_data.get('description', '–Ω–µ—Ç')}",
            reply_markup=reply_markup
        )
    
    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
        user_data = self.get_user_data(update.message.from_user.id)
        
        # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
        total_income = sum(t['amount'] for t in user_data['transactions'] if t['type'] == 'income')
        total_expense = sum(t['amount'] for t in user_data['transactions'] if t['type'] == 'expense')
        
        await update.message.reply_text(
            f"üí∞ –í–ê–® –ë–ê–õ–ê–ù–°\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} —Ä—É–±.\n"
            f"–í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_income:.2f} —Ä—É–±.\n"
            f"–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense:.2f} —Ä—É–±.\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(user_data['transactions'])}"
        )
    
    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        user_data = self.get_user_data(update.message.from_user.id)
        
        if not user_data['transactions']:
            await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤
        expense_by_category = {}
        for transaction in user_data['transactions']:
            if transaction['type'] == 'expense':
                category = transaction['category']
                expense_by_category[category] = expense_by_category.get(category, 0) + transaction['amount']
        
        if expense_by_category:
            stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–•–û–î–û–í:\n\n"
            for category, amount in sorted(expense_by_category.items(), key=lambda x: x[1], reverse=True):
                stats_text += f"‚Ä¢ {category}: {amount:.2f} —Ä—É–±.\n"
        else:
            stats_text = "–†–∞—Å—Ö–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
        
        await update.message.reply_text(stats_text)
    
    async def show_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
        user_data = self.get_user_data(update.message.from_user.id)
        
        if not user_data['transactions']:
            await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π")
            return
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
        recent_transactions = user_data['transactions'][-10:]
        history_text = "üìã –ü–û–°–õ–ï–î–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò:\n\n"
        
        for i, transaction in enumerate(reversed(recent_transactions), 1):
            emoji = "üì•" if transaction['type'] == 'income' else "üì§"
            operation_type = "–¥–æ—Ö–æ–¥" if transaction['type'] == 'income' else "—Ä–∞—Å—Ö–æ–¥"
            history_text += f"{emoji} {operation_type.upper()}\n"
            history_text += f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction['category']}\n"
            history_text += f"   –°—É–º–º–∞: {transaction['amount']} —Ä—É–±.\n"
            history_text += f"   –î–∞—Ç–∞: {transaction['date']}\n"
            if transaction['description']:
                history_text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {transaction['description']}\n"
            history_text += "\n"
        
        await update.message.reply_text(history_text)
    
    async def export_to_excel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel"""
        user_data = self.get_user_data(update.message.from_user.id)
        
        if not user_data['transactions']:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        df = pd.DataFrame(user_data['transactions'])
        filename = f"finance_export_{update.message.from_user.id}.xlsx"
        df.to_excel(filename, index=False)
        
        await update.message.reply_document(
            document=open(filename, 'rb'),
            filename=filename,
            caption="–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel"
        )
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), KeyboardButton("üì§ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
                [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")]
            ], resize_keyboard=True)
        )
        return ConversationHandler.END

def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = "7893966136:AAFEQk7dGE9cKGS5mWrSWeEBZKajEFYHofQ"
    
    bot = FinanceBot(TOKEN)
    application = Application.builder().token(TOKEN).build()
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^(üì• –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥)$"), bot.add_income),
            MessageHandler(filters.Regex("^(üì§ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥)$"), bot.add_expense)
        ],
        states={
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.category_handler)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.amount_handler)],
            DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.description_handler),
                CommandHandler("skip", bot.skip_description)
            ]
        },
        fallbacks=[CommandHandler("cancel", bot.cancel), MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞)$"), bot.cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex("^(üí∞ –ë–∞–ª–∞–Ω—Å)$"), bot.show_balance))
    application.add_handler(MessageHandler(filters.Regex("^(üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$"), bot.show_statistics))
    application.add_handler(MessageHandler(filters.Regex("^(üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π)$"), bot.show_history))
    application.add_handler(CommandHandler("export", bot.export_to_excel))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()